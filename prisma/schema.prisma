// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// model

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  reviews   Review[] @relation(onDelete: Cascade)
  comments  Comment[] @relation(onDelete: Cascade)
}

model Item {
  id        Int      @id @default(autoincrement())
  name      String
  reviews   Review[] @relation(onDelete: Cascade) // Cascade delete reviews
}

model Comment {
  id        Int      @id @default(autoincrement())
  text      String
  reviewId  Int
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  review    Review   @relation(fields: [reviewId], references: [id], name: "ReviewComments", onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, reviewId]) // Ensure one comment per user per review
}

model Review {
  id        Int       @id @default(autoincrement())
  text      String
  rating    Int
  itemId    Int
  userId    Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  item      Item      @relation(fields: [itemId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  comments  Comment[] @relation("ReviewComments", onDelete: Cascade)

  @@unique([userId, itemId]) // Ensure a user can only leave one review per item
}
